version: '3.8'
services:
  db:
    container_name: rentless-db
    image: mysql:8.0
    cap_add:
      - SYS_NICE
    restart: always
    environment:
      - MYSQL_DATABASE=rentless
      - MYSQL_ROOT_PASSWORD=password
    ports:
      - '3307:3306'
    volumes:
      - db:/var/lib/mysql
      - ./db/script/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - rentless
  some-rabbit:
    # docker run --name some-rabbit -p 5672:5672 -p 8084:15672 -d rabbitmq:3-management
    container_name: some-rabbit
    image: rabbitmq:3-management
    ports:
      - '5672:5672'
      - '8084:15672'
  product-server:
    build:
      context: ./service/product-service
      dockerfile: server.Dockerfile
    restart: always
    ports:
      - '50051:50051'
    networks:
      - rentless
  product-client:
    build:
      context: ./service/product-service
      dockerfile: client.Dockerfile
    restart: always
    ports:
      - '8081:8081'
    networks:
      - rentless
  user-service:
    build:
      context: ./service/user-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - '8080:8080'
    networks:
      - rentless
    depends_on:
      - db
  review-con-service:
    build:
      context: ./service/review-service
      dockerfile: review-con.Dockerfile
    restart: always
    networks:
      - rentless
    depends_on:
      - db
  review-pro-service:
    build:
      context: ./service/review-service
      dockerfile: review-pro.Dockerfile
    restart: always
    ports:
      - '8082:8082'
    networks:
      - rentless
    depends_on:
      - db
  rental-service:
    build:
      context: ./service/rental-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - '8083:8083'
    networks:
      - rentless
  # Kong gateway

  # docker volume create pg_data &&

  # docker run -d --name kong-database --network=kong-net --restart unless-stopped -v pg_data:/var/lib/postgresql/data -p 5432:5432 -e "POSTGRES_USER=kong" -e "POSTGRES_DB=kong" -e "POSTGRES_PASSWORD=kong" postgres:9.6 &&

  # docker run --rm --network=kong-net -e "KONG_DATABASE=postgres" -e "KONG_PG_HOST=kong-database" -e "KONG_PG_USER=kong" -e "KONG_PG_PASSWORD=kong" -e "KONG_CASSANDRA_CONTACT_POINTS=kong-database" kong:latest kong migrations bootstrap &&

  # docker run -d --name kong --restart unless-stopped --network=kong-net -e "KONG_DATABASE=postgres" -e "KONG_PG_HOST=kong-database" -e "KONG_PG_USER=kong" -e "KONG_PG_PASSWORD=kong" -e "KONG_PROXY_ACCESS_LOG=/dev/stdout" -e "KONG_ADMIN_ACCESS_LOG=/dev/stdout" -e "KONG_PROXY_ERROR_LOG=/dev/stderr" -e "KONG_ADMIN_ERROR_LOG=/dev/stderr" -e "KONG_ADMIN_LISTEN=0.0.0.0:8001,0.0.0.0:8444 ssl" -p 8000:8000 -p 8443:8443 -p 8001:8001 -p 8444:8444 kong:latest &&

  # docker run --rm --network=kong-net pantsel/konga -c prepare -a postgres -u postgresql://kong:kong@kong-database:5432/konga &&

  # docker run -d -p 1337:1337 --restart unless-stopped --network kong-net -e "TOKEN_SECRET=2E55D9A3EFB8542DC145C19EA3D5E" -e "DB_ADAPTER=postgres" -e "DB_URI=postgresql://kong:kong@kong-database:5432/konga" -e "NODE_ENV=production" --name konga pantsel/konga
  kong-database:
    image: postgres:9.6
    container_name: kong-database
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kong
    volumes:
      - 'pg_data:/var/lib/postgresql/data'
    networks:
      - rentless

  kong-migrations:
    image: kong
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_PASSWORD=kong
      - KONG_CASSANDRA_CONTACT_POINTS=kong-database
    command: kong migrations bootstrap
    restart: on-failure
    depends_on:
      - rentless

  kong:
    image: kong
    container_name: kong
    environment:
      - LC_CTYPE=en_US.UTF-8
      - LC_ALL=en_US.UTF-8
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
      - KONG_CASSANDRA_CONTACT_POINTS=kong-database
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
    restart: on-failure
    ports:
      - 8000:8000
      - 8443:8443
      - 8001:8001
      - 8444:8444
    links:
      - kong-database:kong-database
    depends_on:
      - kong-migrations
    networks:
      - rentless

  konga:
    image: pantsel/konga
    ports:
      - 1337:1337
    links:
      - kong:kong
    container_name: konga
    environment:
      - NODE_ENV=production
    networks:
      - rentless

networks:
  rentless:
    driver: bridge
volumes:
  db:
    driver: local
  pg_data:
    driver: local
