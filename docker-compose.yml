version: "3.8"
services:
  db:
    container_name: rentless-db
    image: mysql:8.0
    cap_add:
      - SYS_NICE
    restart: always
    environment:
      - MYSQL_DATABASE=rentless
      - MYSQL_ROOT_PASSWORD=password
    expose:
      - "3306"
    ports:
      - "3307:3306"
    volumes:
      - db:/var/lib/mysql
      - ./db/script/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - rentless

  some-rabbit:
    # docker run --name some-rabbit -p 5672:5672 -p 8084:15672 -d rabbitmq:3-management
    container_name: some-rabbit
    image: rabbitmq:3-management
    expose:
      - "5672"
      - "15672"
    ports:
      - "5672:5672"
      - "8084:15672"

  product-server:
    container_name: product-server
    build:
      context: ./service/product-service
      dockerfile: server.Dockerfile
    restart: always
    expose:
      - "50051"
    ports:
      - "50051:50051"
    networks:
      - rentless

  product-client:
    container_name: product-service
    build:
      context: ./service/product-service
      dockerfile: client.Dockerfile
    restart: always
    expose:
      - "8081"
    ports:
      - "8081:8081"
    networks:
      - rentless

  user-service:
    container_name: user-service
    build:
      context: ./service/user-service
      dockerfile: Dockerfile
    restart: always
    expose:
      - "8080"
    ports:
      - "8080:8080"
    networks:
      - rentless
    depends_on:
      - db

  review-con-service:
    build:
      context: ./service/review-service
      dockerfile: review-con.Dockerfile
    restart: always
    networks:
      - rentless
    depends_on:
      - db

  review-pro-service:
    build:
      context: ./service/review-service
      dockerfile: review-pro.Dockerfile
    restart: always
    expose:
      - "8082"
    ports:
      - "8082:8082"
    networks:
      - rentless
    depends_on:
      - db

  rental-service:
    build:
      context: ./service/rental-service
      dockerfile: Dockerfile
    restart: always
    expose:
      - "8083"
    ports:
      - "8083:8083"
    networks:
      - rentless

  kong-database:
    image: postgres:9.6
    container_name: kong-database
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kong
    volumes:
      - "pg_data:/var/lib/postgresql/data"
    networks:
      - rentless

  kong-migrations:
    image: kong
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_PASSWORD=kong
      - KONG_CASSANDRA_CONTACT_POINTS=kong-database
    command: kong migrations bootstrap
    restart: on-failure
    networks:
      - rentless

  kong:
    image: kong
    container_name: kong
    environment:
      - LC_CTYPE=en_US.UTF-8
      - LC_ALL=en_US.UTF-8
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
      - KONG_CASSANDRA_CONTACT_POINTS=kong-database
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
    restart: on-failure
    ports:
      - 8000:8000
      - 8443:8443
      - 8001:8001
      - 8444:8444
    links:
      - kong-database:kong-database
    depends_on:
      - kong-migrations
    networks:
      - rentless

  konga:
    image: pantsel/konga
    ports:
      - 1337:1337
    links:
      - kong:kong
    container_name: konga
    environment:
      - NODE_ENV=production
    networks:
      - rentless

networks:
  rentless:
    driver: bridge

volumes:
  db:
    driver: local
  pg_data:
    driver: local
